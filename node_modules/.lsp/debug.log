Hello - from c:\Users\job1p\.vscode\extensions\jaredly.reason-vscode-1.7.13\bin.native.exe.hot.exe
Previous log location: C:\Users\job1p\AppData\Local\Temp\lsp.log
Sending notification {"jsonrpc": "2.0", "method": "client/registerCapability", "params": {"registrations": [{"id": "watching", "method": "workspace/didChangeWatchedFiles", "registerOptions": {"watchers": [{"globPattern": "**/bsconfig.json"}, {"globPattern": "**/.merlin"}]}}]}}
Sending response {"id": 0, "jsonrpc": "2.0", "result": {"capabilities": {"textDocumentSync": 1, "hoverProvider": true, "completionProvider": {"resolveProvider": true, "triggerCharacters": ["."]}, "signatureHelpProvider": {"triggerCharacters": ["("]}, "definitionProvider": true, "typeDefinitionProvider": true, "referencesProvider": true, "documentSymbolProvider": true, "codeActionProvider": true, "executeCommandProvider": {"commands": ["reason-language-server.add_to_interface_inner"]}, "codeLensProvider": {"resolveProvider": true}, "documentHighlightProvider": true, "documentRangeFormattingProvider": true, "documentFormattingProvider": true, "renameProvider": true}}}
Read message 
{"jsonrpc":"2.0","method":"initialized","params":{}}
Read message 
{"jsonrpc":"2.0","method":"workspace/didChangeConfiguration","params":{"settings":{"reason_language_server":{"location":"","build_system_override_by_root":{},"refmt":"","lispRefmt":"","mlfmt":"","format_width":80,"per_value_codelens":false,"dependencies_codelens":true,"opens_codelens":true,"show_module_path_on_hover":true,"reloadOnChange":false,"show_debug_errors":false,"autoRebuild":true}}}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///c%3A/Users/job1p/Desktop/faks/Advent-of-code-Ocaml/dan3/test.ml","languageId":"ocaml","version":1,"text":"let dobi_rep sez = \r\n    match sez with\r\n    | [] -> []\r\n    | a :: b -> b\r\n\r\nlet dobi_prvi sez = \r\n    match sez with\r\n    | [] -> failwith \"neki bla bla\"\r\n    | a :: b -> a\r\n\r\nlet pretvorideci sez =\r\n    match sez with\r\n    | [] -> 0\r\n    | a:: rep  -> if a=='1' then (1 + 2 * (pretvorideci rep)) else 2 * (pretvorideci rep)\r\n\r\nlet rec count listoflistofchars =\r\n    match listoflistofchars with\r\n    | [] -> 0\r\n    | a :: rep -> if (dobi_prvi a)=='0' then count rep else (1+ (count rep))\r\n\r\n\r\nlet rec precistivecina listoflistofchars =\r\n    let izb = if (count listoflistofchars) > ((List.length listoflistofchars)/2) then '1' else '0'\r\n    in\r\n    let rec aux sez =\r\n        match sez with\r\n        | [] -> []\r\n        | a :: rep -> if (dobi_prvi a)==izb then (dobi_rep a):: (aux rep) else (aux rep)\r\n    in\r\n    aux listoflistofchars\r\n\r\nlet rec resivecina listoflistofchars =\r\n    match listoflistofchars with\r\n    | [] -> []\r\n    | a:: b -> (if (count listoflistofchars) > ((List.length listoflistofchars)/2) then '1' else '0') :: (resivecina (precistivecina listoflistofchars ))\r\n\r\nlet rec countvecina listoflistofchars=\r\n    match listoflistofchars with\r\n    | [] -> []\r\n    | a:: b ->  ((List.length listoflistofchars)/2) then '1' else '0') :: (resivecina (precistivecina listoflistofchars ))\r\n\r\nlet rec dobi_vecina listoflistofchars =\r\n\r\n\r\n\r\nlet rec precistimanjsina listoflistofchars =\r\n    let izb = if (count listoflistofchars) <= ((List.length listoflistofchars)/2) then '1' else '0'\r\n    in\r\n    let rec aux sez =\r\n        match sez with\r\n        | [] -> []\r\n        | a :: rep -> if (dobi_prvi a)==izb then (dobi_rep a):: (aux rep) else (aux rep)\r\n    in\r\n    aux listoflistofchars\r\n\r\n\r\n\r\n    \r\n"}}}
