Hello - from c:\Users\job1p\.vscode\extensions\jaredly.reason-vscode-1.7.13\bin.native.exe.hot.exe
Previous log location: C:\Users\job1p\AppData\Local\Temp\lsp.log
Sending notification {"jsonrpc": "2.0", "method": "client/registerCapability", "params": {"registrations": [{"id": "watching", "method": "workspace/didChangeWatchedFiles", "registerOptions": {"watchers": [{"globPattern": "**/bsconfig.json"}, {"globPattern": "**/.merlin"}]}}]}}
Sending response {"id": 0, "jsonrpc": "2.0", "result": {"capabilities": {"textDocumentSync": 1, "hoverProvider": true, "completionProvider": {"resolveProvider": true, "triggerCharacters": ["."]}, "signatureHelpProvider": {"triggerCharacters": ["("]}, "definitionProvider": true, "typeDefinitionProvider": true, "referencesProvider": true, "documentSymbolProvider": true, "codeActionProvider": true, "executeCommandProvider": {"commands": ["reason-language-server.add_to_interface_inner"]}, "codeLensProvider": {"resolveProvider": true}, "documentHighlightProvider": true, "documentRangeFormattingProvider": true, "documentFormattingProvider": true, "renameProvider": true}}}
Read message 
{"jsonrpc":"2.0","method":"initialized","params":{}}
Read message 
{"jsonrpc":"2.0","method":"workspace/didChangeConfiguration","params":{"settings":{"reason_language_server":{"location":"","build_system_override_by_root":{},"refmt":"","lispRefmt":"","mlfmt":"","format_width":80,"per_value_codelens":false,"dependencies_codelens":true,"opens_codelens":true,"show_module_path_on_hover":true,"reloadOnChange":false,"show_debug_errors":false,"autoRebuild":true}}}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///c%3A/Users/job1p/Desktop/faks/Advent-of-code-Ocaml/dan10/dan10.ml","languageId":"ocaml","version":1,"text":"let load vsebina_datoteke =\r\n    let s = String.split_on_char '\\n' vsebina_datoteke in\r\n    s |> List.map String.trim\r\n\r\nlet preberi_datoteko ime_datoteke =\r\n    let chan = open_in_bin ime_datoteke in\r\n    let vsebina = really_input_string chan (in_channel_length chan) in\r\n    close_in chan;\r\n    vsebina;;\r\n\r\nlet izpisi_datoteko ime_datoteke vsebina =\r\n    let chan = open_out_bin ime_datoteke in\r\n    output_string chan vsebina;\r\n    close_out chan;;\r\n\r\nlet f ch =\r\n    match ch with\r\n    | '(' -> ')'\r\n    | '[' -> ']'\r\n    | '{' -> '}'\r\n    | '<' -> '>'\r\n    | _ -> 'n';;\r\n\r\nlet vrednost ch =\r\n    match ch with\r\n    | ')' -> 3\r\n    | ']' -> 57\r\n    | '}' -> 1197\r\n    | '>' -> 25137\r\n    | _ -> failwith \"hmm\";;\r\n\r\nlet predelaj s =\r\n    let ans = ref 0 in\r\n    let n = String.length s in\r\n    let st = Stack.create() in\r\n    for i=0 to n-1 do (\r\n        let ch = s.[i] in\r\n        if ((f ch)=='n') then (\r\n            if !ans=0 then (\r\n                if Stack.is_empty st then ans:=(vrednost ch)\r\n                else (\r\n                    let t = Stack.pop st in\r\n                    if(t==ch) then()\r\n                    else ans:=(vrednost ch)\r\n                )\r\n            )\r\n            else ()\r\n        )\r\n        else Stack.push (f ch) st\r\n    )\r\n    done;\r\n    (!ans);;\r\nlet novavrednost ch =\r\n    match ch with\r\n    | ')' -> 1\r\n    | ']' -> 2\r\n    | '}' -> 3\r\n    | '>' -> 4\r\n    | _ -> failwith \"hmm\";;\r\nlet rec resi1 sez=\r\n    match sez with\r\n    | a::b -> (\r\n        (predelaj a) + (resi1 b))\r\n    | [] -> 0;;\r\n\r\nlet dopolni s=\r\n    let n = String.length s in\r\n    let st = Stack.create() in\r\n    for i=0 to n-1 do (\r\n        let ch = s.[i] in\r\n        if ((f ch)=='n') then( \r\n            Stack.pop st;\r\n            ()\r\n            )\r\n        else (Stack.push (f ch) st)\r\n    )\r\n    done;\r\n    let ans=ref 0 in\r\n    while not (Stack.is_empty st) do\r\n        ans:= ((!ans) * 5  + (novavrednost (Stack.pop st)))\r\n    done;\r\n    (!ans);;\r\n\r\nlet rec resi2 sez=\r\n    match sez with\r\n    | a::b -> (\r\n        if (predelaj a)==0 then (dopolni a) :: (resi2 b)\r\n        else (resi2 b)\r\n    )\r\n    | [] -> [];;\r\n\r\nlet cmp x y =\r\n    if x<y then 1\r\n    else -1\r\n\r\nlet dobi_mediano sez=\r\n    let srt =List.sort cmp sez in\r\n    let arr =Array.of_list srt in\r\n    let n=Array.length arr in\r\n    arr.(n/2)\r\n\r\n\r\nlet liss =load (preberi_datoteko \"day_10.in\");;\r\nizpisi_datoteko \"day_10_1.out\" (string_of_int (resi1 liss));;\r\nizpisi_datoteko \"day_10_2.out\" (string_of_int (dobi_mediano(resi2 liss)));;"}}}
